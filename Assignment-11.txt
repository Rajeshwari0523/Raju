1. Write a Python program to sum all the items in a list.?

def sum_list(lst):
    # Initialize a variable to store the sum
    total = 0
    
    # Iterate through each item in the list
    for item in lst:
        # Add the current item to the total
        total += item
    
    # Return the sum of all items in the list
    return total

# Example usage:
my_list = [1, 2, 3, 4, 5]
print("Sum of the list:", sum_list(my_list))


output:Sum of the list: 15

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2. Write a Python program to get the largest and smallest number from a list without builtin functions.?


def find_max_min(lst):
    if not lst:
        return None, None
    
    # Initialize variables to store the maximum and minimum values
    max_num = lst[0]
    min_num = lst[0]
    
    # Iterate through the list to find the maximum and minimum numbers
    for num in lst:
        if num > max_num:
            max_num = num
        elif num < min_num:
            min_num = num
    
    return max_num, min_num

# Example usage:
numbers = [3, 7, 2, 9, 1, 5]
max_num, min_num = find_max_min(numbers)
print("Maximum number:", max_num)
print("Minimum number:", min_num)

output:
Maximum number: 9
Minimum number: 1

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3. Write a Python program to find duplicate values from a list and display those.?

def find_duplicates(lst):
    # Create a dictionary to store each item and the number of times it appears
    seen = {}
    # Create a list to store the duplicate values
    duplicates = []

    # Loop through each item in the list
    for item in lst:
        # If the item is not in the dictionary, add it with a count of 1
        if item not in seen:
            seen[item] = 1
        else:
            # If the item is already in the dictionary, it's a duplicate
            # Check if we have only seen the item once before, to avoid adding it multiple times to duplicates
            if seen[item] == 1:
                # Add the duplicate item to the duplicates list
                duplicates.append(item)
            # Increment the count for the item in the dictionary
            seen[item] += 1
    
    # Return the list of duplicate values
    return duplicates

# Example usage:
my_list = [1, 2, 3, 4, 2, 5, 6, 3, 7, 8, 1]
result = find_duplicates(my_list)
print("Duplicate values in the list:", result)


output:Duplicate values in the list: [2, 3, 1]

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4. Write a Python program to split a given list into two parts where the length of the first part of the list is given. 

Original list: [1, 1, 2, 3, 4, 4, 5, 1] ?

def split_list(original_list, length_first_part):
    # Split the list based on the given length
    first_part = original_list[:length_first_part]  # Slice the list from index 0 to length_first_part
    second_part = original_list[length_first_part:]  # Slice the list from index length_first_part to the end
    # Return the two parts as a tuple
    return (first_part, second_part)

# Example usage:
original_list = [1, 1, 2, 3, 4, 4, 5, 1]
length_first_part = 3
# Call the function to split the list and store the result in split_parts
split_parts = split_list(original_list, length_first_part)
print("Splitted the said list into two parts:")
# Print the result
print(split_parts)

output:Splitted the said list into two parts:
([1, 1, 2], [3, 4, 4, 5, 1])

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


5. Write a Python program to traverse a given list in reverse order, and print the elements with the original index. Original list: ['red', 'green', 'white', 'black'] Traverse the said list in reverse order:


def traverse_reverse(lst):
    # Loop through the list in reverse order using reversed() function
    for index, item in enumerate(reversed(lst)):
        # Calculate the original index by subtracting the current index from the length of the list minus 1
        original_index = len(lst) - 1 - index
        # Print the element and its original index
        print(lst[original_index])

# Example usage:
original_list = ['red', 'green', 'white', 'black']
print("Traverse the said list in reverse order:")
traverse_reverse(original_list)

output:
Traverse the said list in reverse order:
black
white
green
red


